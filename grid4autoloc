#!/bin/bash

# Original scautoloc grid
GRID=$2          # e.g. "$SEISCOMP_ROOT/share/scautoloc/grid.conf"

# Author of pick to search active stations
AUTHOR=$1        # "scvspick@sc-eew-1"

# database connection parameter
DATABASE="localhost/seiscomp3"

NLASTDAYS=9      # numbers of days to look back for active station search
MINPICK=1        # min number of picks for active station search

NSTATMINGRID=4   # scautoloc threshold stations number within radius around each grid point
SAFETYRATIO=2    # the actual number of active stations used to compute radius around each grid point is $SAFETYRATIO*$NSTATMINGRID 
TELEDIST=4       # central angle threshold to switch to teleseismic case
TELERANK=6       # scautoloc threshold stations number within radius around each grid point in teleseismic case

# Temporary file to store active station locations 
STATIONLOCATIONFILE="stations/"$AUTHOR"/"$(date "+%Y-%m-%d")
DENSEGRIDFILE="stations/"$AUTHOR"/"$(date "+%Y-%m-%d").grid
mkdir -p $(dirname $STATIONLOCATIONFILE)

stationlocation () {
	curl -s "http://localhost:8081/fdsnws/station/1/query?level=station&format=text&network=$1&station=$2&endafter=$3&startbefore=$4"
}

activestations () {
	scquery -Q "SELECT waveformID_networkCode AS Network, waveformID_stationCode AS Station, COUNT(_oid) AS Picks, MIN(time_value) AS Start, MAX(time_value) AS End FROM Pick WHERE time_value >= '"$(date --date="9 day ago" "+%Y-%m-%d")"' AND time_value <= '2030-06-30' AND creationInfo_author like '$AUTHOR' GROUP BY waveformID_networkCode, waveformID_stationCode;" -d $DATABASE
}

activestationslocations () {
	activestations | while  IFS='|'  read NETW STAT NP START END
	do 
		if  [ -z "$NP" ] || [ "$NP" -lt "$MINPICK" ]
		then
			continue
		fi
	 	stationlocation $NETW $STAT ${START/ ??:??:??} ${END/ ??:??:??}|tail -1
	done
}

activestationslocations > $STATIONLOCATIONFILE

awk '{print $3}' $GRID|sort -u|while read D
do 
	( awk -F'|' '{print $4,$3}' $STATIONLOCATIONFILE ; awk '$3~/'$D'/{print $2,$1}' $GRID |sort -u ) | gmt sphtriangulate -Qv | awk '$1!~/>/&&$1!~/#/{print $2,$1,"'$D' 4.0 180 8"}' 
done | sort -u | sort -n -k3 > ${DENSEGRIDFILE}


nthhaversine () {
	INCLUDETELE=$2
	TMPGRID=$1
	python -c 'from math import radians, atan2, degrees, cos, sin, asin, sqrt
from numpy import sort, around
stations=[]
with open("'$STATIONLOCATIONFILE'") as f: 
	for line in f: 
		stations+=[map(radians,map(float,line.split("|")[2:4]))]
grid=[]
with open("'${TMPGRID}'") as f:
	for line in f:
		grid+=[line.split()]

for g in grid:
	distances=[]
	angles=[]
	lon1, lat1 = map(radians,map(float,[g[1], g[0]]))
	for s in stations:
		lon2, lat2 = (s[1], s[0])
		dlon = lon2 - lon1 
		dlat = lat2 - lat1 
		a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
		c = 2 * asin(sqrt(a)) 
		r = 6371 # Radius of earth in kilometers. Use 3956 for miles
		distances += [c * r]
		angles += [degrees(c)]
	rank=int(('$NSTATMINGRID'-1)*'$SAFETYRATIO')
	treshold='$NSTATMINGRID'
	if sort(angles)[rank] >= '$TELEDIST' and '${INCLUDETELE}':
		rank=int(('$TELERANK'-1)*'$SAFETYRATIO')
		treshold='$TELERANK'
		print g[0],g[1],g[2],g[3],around(sort(angles)[rank], decimals=3),treshold
	elif sort(angles)[rank] < '$TELEDIST':
		print g[0],g[1],g[2],g[3],around(sort(angles)[rank], decimals=3),treshold
'
}

nthhaversine $GRID True
nthhaversine $DENSEGRIDFILE False
